// Program-ID: P3.c
// Author:  Squirrel Squad
// OS:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_BUFFER   1024
#define MAX_ARGS   64
#define SEPARATORS  " \t\n"

// enviroment variable  
extern char **environ; 


int main() {

        // variables
        char str[80];
        char* args[MAX_ARGS];
        char cmd[MAX_BUFFER];
        //will be used to help end loop
        int status = 1;

        do {
                // get the user input
                printf("Enter the Internal Command: ");
                fgets(cmd, MAX_BUFFER, stdin);

                //tokenize the user input
                printf("%s", cmd);
                args[0] = strtok(cmd, SEPARATORS);
		printf("args[0] = %s\n",args[0]);
		 for (i = 0; args[i] = strtok(NULL, SEPARATORS); i++)
			 printf("args[%d] = %s\n",i, args[i]);
	        	}

                // perform the necessary operations based on the args
                if ((strcmp(*args, "myclear" )) == 0){
                                //perform myclear
                                system("clear");
                                printf("myclear entered\n");
                }
                else if (((strncmp(*args, "mydir", 5)) == 0) ){
                            // perform mydir, having trouble concatenating for system()
				char directory[MAX_BUFFER];
				strcpy(directory, "ls -al ");
  				//strcat(directory, args[1]);
                                printf("mydir entered\n");
                                printf("%s", directory);
                                

                }
                else if ((strcmp(*args, "myenviron")) == 0){
                                // perform myenvi
			for( char ** en = environ; *en != 0; en++){
				char  *e = *en;
				printf("%\n", e);
				}
			return 0;
                }

                else if ((strcmp(*args, "myquit")) == 0){
                        printf("myquit entered\n");
                        status = 0;
                                // perform myquit
                }

                else if (args[0] == NULL){
                        printf("Please enter an input.\n");
                }

                else{
                        system(args[0]);
                           //perform external command calendar
                }


        }while(status != 0);

        // end the main program
        return 0;
}


